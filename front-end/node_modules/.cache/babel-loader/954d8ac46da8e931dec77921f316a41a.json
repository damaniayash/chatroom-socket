{"ast":null,"code":"var _jsxFileName = \"/Users/yashdamania/Downloads/webSocket-App-main/front-end/src/LoginSignup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginSignup.css';\nimport UserContext from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginSignup() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    setLoggedInUser\n  } = useContext(UserContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const validatePassword = pass => {\n    if (pass.length < 6) {\n      return \"Password should be at least 6 characters.\";\n    }\n\n    if (!/[A-Z]/.test(pass)) {\n      return \"Password should contain at least one uppercase letter.\";\n    }\n\n    return \"\";\n  };\n\n  const handleLoginSignup = async e => {\n    e.preventDefault(); // Reset any previous errors\n\n    setError(''); // Only validate password for sign up, not for login\n\n    if (!isLogin) {\n      const passwordError = validatePassword(password);\n\n      if (passwordError) {\n        setError(passwordError);\n        return;\n      }\n    }\n\n    const endpoint = isLogin ? '/login' : '/signup';\n    const payload = isLogin ? {\n      email,\n      password\n    } : {\n      name,\n      email,\n      password\n    };\n    const response = await fetch(`http://localhost:5000${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await response.json();\n    console.log(data); // UI error handling\n\n    if (!response.ok) {\n      setError(data.message || 'An error occurred. Please try again.');\n      return;\n    }\n\n    if (isLogin) {\n      // Store the username for the active user. Here, I'm using localStorage.\n      console.log(email);\n      fetch(`http://localhost:5000/get-username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      }).then(res => res.json()).then(data => {\n        console.log(data);\n        localStorage.setItem('activeUserName', data.name);\n        localStorage.setItem('activeUserId', data.id);\n        setLoggedInUser({\n          id: data.id,\n          name: data.name,\n          email: email\n        });\n      });\n      localStorage.setItem('activeUserEmail', email); // Navigate to the Chatroom page\n\n      navigate('/chatroom');\n    } else {\n      // Alert the user about successful signup\n      alert('Sign up was successful. You can now log in.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-signup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLoginSignup,\n      children: [!isLogin && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: isLogin ? \"Login\" : \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsLogin(!isLogin),\n      children: isLogin ? \"Switch to Sign Up\" : \"Switch to Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginSignup, \"rNk6wujXLd1wfgJQoojhrgpOvbk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LoginSignup;\nexport default LoginSignup;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginSignup\");","map":{"version":3,"names":["React","useState","useContext","useNavigate","UserContext","LoginSignup","navigate","setLoggedInUser","isLogin","setIsLogin","email","setEmail","name","setName","password","setPassword","error","setError","validatePassword","pass","length","test","handleLoginSignup","e","preventDefault","passwordError","endpoint","payload","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","ok","message","then","res","localStorage","setItem","id","alert","target","value"],"sources":["/Users/yashdamania/Downloads/webSocket-App-main/front-end/src/LoginSignup.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginSignup.css';\nimport UserContext from './UserContext';\n\n\nfunction LoginSignup() {\n    const navigate = useNavigate();\n    const { setLoggedInUser } = useContext(UserContext);\n\n\n    const [isLogin, setIsLogin] = useState(true);\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const validatePassword = (pass) => {\n        if (pass.length < 6) {\n            return \"Password should be at least 6 characters.\";\n        }\n        if (!/[A-Z]/.test(pass)) {\n            return \"Password should contain at least one uppercase letter.\";\n        }\n        return \"\";\n    };\n\n    const handleLoginSignup = async (e) => {\n        e.preventDefault();\n\n        // Reset any previous errors\n        setError('');\n\n        // Only validate password for sign up, not for login\n        if (!isLogin) {\n            const passwordError = validatePassword(password);\n            if (passwordError) {\n                setError(passwordError);\n                return;\n            }\n        }\n\n        const endpoint = isLogin ? '/login' : '/signup';\n        const payload = isLogin ? {\n            email,\n            password\n        } : {\n            name,\n            email,\n            password\n        };\n\n        const response = await fetch(`http://localhost:5000${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const data = await response.json();\n        console.log(data);\n\n        // UI error handling\n        if (!response.ok) {\n            setError(data.message || 'An error occurred. Please try again.');\n            return;\n        }\n\n        if (isLogin) {\n            // Store the username for the active user. Here, I'm using localStorage.\n            console.log(email);\n            fetch(`http://localhost:5000/get-username`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email: email })\n            })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data)\n                localStorage.setItem('activeUserName', data.name);\n                localStorage.setItem('activeUserId', data.id);\n                setLoggedInUser({\n                    id: data.id,\n                    name: data.name,\n                    email: email\n                });\n            });\n            localStorage.setItem('activeUserEmail', email);\n            \n            // Navigate to the Chatroom page\n            navigate('/chatroom');\n        } else {\n            // Alert the user about successful signup\n            alert('Sign up was successful. You can now log in.');\n        }\n        \n    };\n\n    return (\n        <div className=\"login-signup-container\">\n            <h2>{isLogin ? \"Login\" : \"Sign Up\"}</h2>\n            <form onSubmit={handleLoginSignup}>\n                {!isLogin && (\n                    <input \n                        type=\"text\" \n                        placeholder=\"Username\" \n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        required \n                    />\n                )}\n                <input \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required \n                />\n                <input \n                    type=\"password\" \n                    placeholder=\"Password\" \n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required \n                />\n                <button type=\"submit\">{isLogin ? \"Login\" : \"Sign Up\"}</button>\n            </form>\n            {error && <p className=\"error\">{error}</p>}\n            <button onClick={() => setIsLogin(!isLogin)}>\n                {isLogin ? \"Switch to Sign Up\" : \"Switch to Login\"}\n            </button>\n        </div>\n    );\n}\n\nexport default LoginSignup;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,mBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,WAAT,GAAuB;EAAA;;EACnB,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;EACA,MAAM;IAAEI;EAAF,IAAsBL,UAAU,CAACE,WAAD,CAAtC;EAGA,MAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;;EAEA,MAAMiB,gBAAgB,GAAIC,IAAD,IAAU;IAC/B,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;MACjB,OAAO,2CAAP;IACH;;IACD,IAAI,CAAC,QAAQC,IAAR,CAAaF,IAAb,CAAL,EAAyB;MACrB,OAAO,wDAAP;IACH;;IACD,OAAO,EAAP;EACH,CARD;;EAUA,MAAMG,iBAAiB,GAAG,MAAOC,CAAP,IAAa;IACnCA,CAAC,CAACC,cAAF,GADmC,CAGnC;;IACAP,QAAQ,CAAC,EAAD,CAAR,CAJmC,CAMnC;;IACA,IAAI,CAACT,OAAL,EAAc;MACV,MAAMiB,aAAa,GAAGP,gBAAgB,CAACJ,QAAD,CAAtC;;MACA,IAAIW,aAAJ,EAAmB;QACfR,QAAQ,CAACQ,aAAD,CAAR;QACA;MACH;IACJ;;IAED,MAAMC,QAAQ,GAAGlB,OAAO,GAAG,QAAH,GAAc,SAAtC;IACA,MAAMmB,OAAO,GAAGnB,OAAO,GAAG;MACtBE,KADsB;MAEtBI;IAFsB,CAAH,GAGnB;MACAF,IADA;MAEAF,KAFA;MAGAI;IAHA,CAHJ;IASA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAE,wBAAuBH,QAAS,EAAlC,EAAqC;MAC7DI,MAAM,EAAE,MADqD;MAE7DC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFoD;MAK7DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;IALuD,CAArC,CAA5B;IAQA,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;IACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAlCmC,CAoCnC;;IACA,IAAI,CAACP,QAAQ,CAACW,EAAd,EAAkB;MACdtB,QAAQ,CAACkB,IAAI,CAACK,OAAL,IAAgB,sCAAjB,CAAR;MACA;IACH;;IAED,IAAIhC,OAAJ,EAAa;MACT;MACA6B,OAAO,CAACC,GAAR,CAAY5B,KAAZ;MACAmB,KAAK,CAAE,oCAAF,EAAuC;QAC5CC,MAAM,EAAE,MADoC;QAE5CC,OAAO,EAAE;UACL,gBAAgB;QADX,CAFmC;QAK5CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAExB,KAAK,EAAEA;QAAT,CAAf;MALsC,CAAvC,CAAL,CAOC+B,IAPD,CAOMC,GAAG,IAAIA,GAAG,CAACN,IAAJ,EAPb,EAQCK,IARD,CAQMN,IAAI,IAAI;QACVE,OAAO,CAACC,GAAR,CAAYH,IAAZ;QACAQ,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCT,IAAI,CAACvB,IAA5C;QACA+B,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCT,IAAI,CAACU,EAA1C;QACAtC,eAAe,CAAC;UACZsC,EAAE,EAAEV,IAAI,CAACU,EADG;UAEZjC,IAAI,EAAEuB,IAAI,CAACvB,IAFC;UAGZF,KAAK,EAAEA;QAHK,CAAD,CAAf;MAKH,CAjBD;MAkBAiC,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwClC,KAAxC,EArBS,CAuBT;;MACAJ,QAAQ,CAAC,WAAD,CAAR;IACH,CAzBD,MAyBO;MACH;MACAwC,KAAK,CAAC,6CAAD,CAAL;IACH;EAEJ,CAxED;;EA0EA,oBACI;IAAK,SAAS,EAAC,wBAAf;IAAA,wBACI;MAAA,UAAKtC,OAAO,GAAG,OAAH,GAAa;IAAzB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAM,QAAQ,EAAEc,iBAAhB;MAAA,WACK,CAACd,OAAD,iBACG;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,UAFhB;QAGI,KAAK,EAAEI,IAHX;QAII,QAAQ,EAAGW,CAAD,IAAOV,OAAO,CAACU,CAAC,CAACwB,MAAF,CAASC,KAAV,CAJ5B;QAKI,QAAQ;MALZ;QAAA;QAAA;QAAA;MAAA,QAFR,eAUI;QACI,IAAI,EAAC,OADT;QAEI,WAAW,EAAC,OAFhB;QAGI,KAAK,EAAEtC,KAHX;QAII,QAAQ,EAAGa,CAAD,IAAOZ,QAAQ,CAACY,CAAC,CAACwB,MAAF,CAASC,KAAV,CAJ7B;QAKI,QAAQ;MALZ;QAAA;QAAA;QAAA;MAAA,QAVJ,eAiBI;QACI,IAAI,EAAC,UADT;QAEI,WAAW,EAAC,UAFhB;QAGI,KAAK,EAAElC,QAHX;QAII,QAAQ,EAAGS,CAAD,IAAOR,WAAW,CAACQ,CAAC,CAACwB,MAAF,CAASC,KAAV,CAJhC;QAKI,QAAQ;MALZ;QAAA;QAAA;QAAA;MAAA,QAjBJ,eAwBI;QAAQ,IAAI,EAAC,QAAb;QAAA,UAAuBxC,OAAO,GAAG,OAAH,GAAa;MAA3C;QAAA;QAAA;QAAA;MAAA,QAxBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,EA4BKQ,KAAK,iBAAI;MAAG,SAAS,EAAC,OAAb;MAAA,UAAsBA;IAAtB;MAAA;MAAA;MAAA;IAAA,QA5Bd,eA6BI;MAAQ,OAAO,EAAE,MAAMP,UAAU,CAAC,CAACD,OAAF,CAAjC;MAAA,UACKA,OAAO,GAAG,mBAAH,GAAyB;IADrC;MAAA;MAAA;MAAA;IAAA,QA7BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAmCH;;GAlIQH,W;UACYF,W;;;KADZE,W;AAoIT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}